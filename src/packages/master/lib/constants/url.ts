/**
 * Defines the contract for a URL provider.
 * Any URL provider class must implement these properties and methods,
 * ensuring consistency and type safety across the application.
 */
export interface IUrlProvider {
  // --- Static URLs ---
  readonly SETTINGS_PAGE_URL: string
  readonly ADD_SETTINGS_PAGE_URL: string
  readonly EDIT_SETTINGS_PAGE_URL: string
  readonly DATA_PAGE_URL: string
  readonly ADD_DATA_PAGE_URL: string
  readonly EDIT_DATA_PAGE_URL: string
  readonly FAQ_CATEGORY_PAGE_URL: string
  readonly TOP_URL: string

  // --- Dynamic URL Generator Methods ---
  getCopySettingPageUrl(id: string): string
  getDetailedCopySettingPageUrl(id: string): string
}

/**
 * A concrete implementation of IUrlProvider that constructs URLs based on a
 * provided path segment
 * This class contains the core logic for building all application URLs.
 */
export class BaseUrlProvider implements IUrlProvider {
  /**
   * The base path for all URLs generated by this instance.
   * e.g., '/members/v3/jcci'
   */
  protected readonly baseUrl: string

  // --- Static URL Properties ---
  public readonly SETTINGS_PAGE_URL: string
  public readonly ADD_SETTINGS_PAGE_URL: string
  public readonly EDIT_SETTINGS_PAGE_URL: string
  public readonly DATA_PAGE_URL: string
  public readonly ADD_DATA_PAGE_URL: string
  public readonly EDIT_DATA_PAGE_URL: string
  public readonly FAQ_CATEGORY_PAGE_URL: string
  public readonly TOP_URL: string

  /**
   * @param segment The dynamic part of the URL path
   */
  constructor(segment: string = '') {
    // 1. Initialize baseUrl first.
    this.baseUrl = `/${segment}`

    // 2. Now, initialize all dependent properties. This resolves the error.
    this.SETTINGS_PAGE_URL = `${this.baseUrl}/master-setting`
    this.ADD_SETTINGS_PAGE_URL = `${this.baseUrl}/master-setting/new`
    this.EDIT_SETTINGS_PAGE_URL = this.SETTINGS_PAGE_URL // Alias for the settings page
    this.DATA_PAGE_URL = `${this.baseUrl}/master-data`
    this.ADD_DATA_PAGE_URL = `${this.baseUrl}/master-data/new`
    this.EDIT_DATA_PAGE_URL = this.DATA_PAGE_URL // Alias for the data page
    this.FAQ_CATEGORY_PAGE_URL = `${this.baseUrl}/faq-category`
    this.TOP_URL = '/members'
  }

  // --- Dynamic URL Method Implementations ---

  /**
   * Generates the URL for the "copy setting" page for a specific item.
   * @param id The unique identifier of the setting to be copied.
   * @returns The fully constructed URL string.
   */
  public getCopySettingPageUrl(id: string): string {
    // This approach is safer than string replacement in components.
    return `${this.baseUrl}/master-setting/${id}/copy/new`
  }

  /**
   * Generates the URL for the detailed "copy setting" view for a specific item.
   * @param id The unique identifier of the setting copy.
   * @returns The fully constructed URL string.
   */
  public getDetailedCopySettingPageUrl(id: string): string {
    return `${this.baseUrl}/master-setting/${id}/copy`
  }
}

// api
export const API_URLS = {
  SETTING: {
    GET_ALL: '/master-setting/list',
    GET_ONE: '/master-setting/detail',
    CREATE: '/master-setting',
    CREATE_BULK: '/master-setting/bulk',
    UPDATE: '/master-setting',
    DELETE: '/master-setting',
    CHECK_EXIST: '/master-setting/check-exist',
  },
  DATA: {
    GET_ALL: '/master-data/list',
    GET_ONE: '/master-data/detail',
    CREATE: '/master-data/create',
    CREATE_BULK: '/master-data/bulk',
    UPDATE: '/master-data',
    DELETE: '/master-data',
    CHECK_EXIST: '/master-data/check-exist',
  },
  TASK: {
    PARENT_TASK: '/tasks/sfn-task-parent',
    DETAIL: '/tasks',
  },
  SEQUENCE: {
    WITH_PROVIDED_SETTING: '/sequence/with-provided-setting',
    WITHOUT_PROVIDED_SETTING: '/sequence',
  },
  HEALTH: '/',
  CCI: '/master/cci',
  MASTER_COPY: '/master/copy',
}
